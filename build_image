#!/bin/sh -e

check_diff () {
    dockerfile=$1
    git fetch origin
    diff=$(git diff $(git merge-base HEAD origin/master) "$dockerfile")
    new_version=$(echo "$diff" | sed -n 's/^+LABEL version=\([0-9]\+\)$/\1/p')
    if ! [ "$new_version" ]; then
        echo "error: version label not updated" 1>&2
        exit 1
    fi
    old_version=$(echo "$diff" | sed -n 's/^-LABEL version=\([0-9]\+\)$/\1/p')
    if [ $new_version -ne $(( $old_version + 1 )) ]; then
        echo "error: expected version label to be $(( $old_version + 1 )) but got $new_version" 1>&2
        exit 1
    fi
    echo $new_version
}

build_image () {
    dockerfile_dir=$1
    expected_version=$2
    tag=temporary_build_tag
    docker build -t "$tag" "$dockerfile_dir" 1>&2
    eval name=$(docker inspect "$tag" | awk '/"name"/ {print $2}' | head -n1)
    name=${name%,}
    if ! [ "$name" ]; then
        echo "error: name label not found" 1>&2
        exit 1
    fi
    eval version=$(docker inspect "$tag" | awk '/"version"/ {print $2}' | head -n1)
    if ! [ "$version" ]; then
        echo "error: version label not found" 1>&2
        exit 1
    fi
    if [ "$expected_version" ] && [ $expected_version -ne $version ]; then
        echo "error: version mismatch" 1>&2
        exit 1
    fi
    docker tag -f "$tag" "${TAG_PREFIX}$name:$version" 1>&2
    docker tag -f "$tag" "${TAG_PREFIX}$name:latest" 1>&2
    docker rmi "$tag" 1>&2
    echo "${TAG_PREFIX}$name:$version"
    echo "${TAG_PREFIX}$name:latest"
}

TAG_PREFIX="monetas/"
if grep -q '^NAME="CentOS Linux"$' /etc/os-release; then
    TAG_PREFIX="docker.io/$TAG_PREFIX"
fi

folders="golang-base java-base android-base"
if [ "$1" = "--check-diff" ]; then
    # sort result in revert mode to be sure that java-base is before android-base
    folders=$(git diff --name-only $(git merge-base HEAD origin/master) |
        sed -n 's/^\(\(golang\|java\|android\)-base\)\/.\+/\1/p' | sort -ur)
    do_check=1
fi
for folder in $folders; do
    [ "$do_check" ] && new_version=$(check_diff "$folder/Dockerfile")
    build_image "$folder" "$new_version"
done
